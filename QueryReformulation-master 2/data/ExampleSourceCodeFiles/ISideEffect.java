/Users/user/eclipse.platform.ui/bundles/org.eclipse.core.databinding.observable/src/org/eclipse/core/databinding/observable/sideeffect/ISideEffect.java
org eclipse core databinding observable sideeffect java util function consumer java util function supplier org eclipse core databinding observable observable org eclipse core databinding observable observable tracker org eclipse core databinding observable realm org eclipse core databinding observable computed value org eclipse core databinding observable writable value org eclipse core internal databinding observable sideeffect side effect link side effect code observables change link side effect lot listener doesn attached instead reacts automatically tracked getters invoked listener observables form directed graph dependencies classes link writable value form inputs graph nodes outputs classes link computed value form interior nodes receive inputs observables produce output observables link side effect leaf nodes nodes receive inputs produce output side effects life cycle passes number paused side listen react change occurs side paused react side resumed some side effects paused construction this creating side object constructor running time when side update control view common pause side view hidden resume side view visible resumed side listen react asynchronously side effects paused resumed number times disposed side listen react remove strong references dependencies once side enters disposed remains garbage collected example usage pre observable value string name observable value string name observable value boolean full name preference label user name side effect side effect side effect create string full name preference name name name user name set text your pre link side effect fill label user react automatically username full name preference accomplished attaching listeners observables advantages link side effect listeners link side effect optimize based branches method remove listeners link observable wasn listen name field full name preference false link side effect batch asynchronously name name change time link side effect since link side effect doesn explicitly attached observables impossible sync underlying data please aware common anti pattern don create observables link side effect remember future runs creating observables link side effect easily create infinite loops pre bad may create infinite loop avatar observable instance fire asynchronous event creation create controls side effect side effect side effect create observable value image avatar avatar observable icon set image avatar value good avatar observable instance remembered invocations side create controls observable value image avatar avatar observable side effect side effect side effect create icon set image avatar value pre noimplement this intended implemented clients side effect disposes side detaching listeners deallocating memory side side execute method invoked this method invoked dispose returns true side disposed disposed side execute retain strong references observables side disposed possibility executing future retaining strong references observables true side disposed disposed increments count number times link side effect paused side paused greater number times resumed enters paused when link side effect paused prevents running resumed note side listening dependencies paused dependency link side effect paused link side effect resumed side paused resumed number times you pause dispose chance resume side effect pause increments count number times link side effect resumed side resumed equal number times paused leaves paused enters resumed error resume link side effect paused when link side effect resumed starts reacting tracked getters invoked runnable react paused disposed link side effect dirty earliest opportunity method returns resume increments count number times link side effect resumed side resumed equal greater number times paused leaves paused enters resumed when link side effect resumed starts reacting tracked getters invoked runnable react paused disposed link side effect dirty synchronously this convenience method fully equivalent calling link resume link dirty faster resume and run dirty causes side synchronously dirty dependencies changed time does link side effect paused dirty adds listener invoked link side effect instance disposed listener invoked receiver disposed time listener attached param disposal consumer consumer notified link side effect disposed add dispose listener consumer side effect disposal consumer removes dispose listener link side effect instance has listener attached param disposal consumer consumer supposed removed dispose listener list remove dispose listener consumer side effect disposal consumer creates link side effect link realm callers responsible invoking link resume link resume and run dirty runnable executing param runnable runnable execute must idempotent newly created link side effect activated callers responsible calling link dispose result longer needed side effect create paused runnable runnable side effect runnable creates link side effect realm activate callers responsible invoking link resume runnable executing param realm realm execute param runnable runnable execute must idempotent newly created link side effect activated callers responsible calling link dispose result longer needed side effect create paused realm realm runnable runnable side effect realm runnable runs runnable synchronously runnable tracked getter invoked runnable returned link side effect disposed returned link side effect realm caller dispose returned link side effect param runnable idempotent runnable executed synchronously additional times tracked getter link side effect side running link runnable executed dispose method invoked side effect create runnable runnable observable dependencies observable tracker and monitor runnable null null dependencies length side effect side effect runnable dependencies runs supplier passes result consumer happen tracked getter invoked supplier link side effect disposed returned link side effect realm caller dispose returned link side effect side effect initially resumed invocation method synchronous this version efficient link create resumed supplier consumer preferred synchronous execution acceptable param supplier supplier compute monitored tracked getters side free param consumer consumer receive idempotent monitored tracked getters link side effect side running link runnable executed dispose method invoked side effect create supplier supplier consumer consumer side effect create side effect runnable supplier consumer runs supplier passes result consumer happen tracked getter invoked supplier link side effect disposed returned link side effect realm caller dispose returned link side effect side effect initially resumed invocation method asynchronous this constructing link side effect constructor ensures constructor completion invocation link side effect however extra safety small performance cost link create supplier consumer param supplier supplier compute monitored tracked getters side free param consumer consumer receive idempotent monitored tracked getters link side effect side running link runnable executed dispose method invoked side effect create resumed supplier supplier consumer consumer side effect result side effect create paused side effect runnable supplier consumer result resume result runs supplier returns null result time returns null result result passed consumer side effect dispose supplier returns null tracked getters invokes monitored change supplier point future side effect dirty resumed invocation supplier asynchronous caller invoked synchronously call link dirty unlike link create supplier consumer consumer idempotent this method gathering asynchronous data opening editor saving disk opening dialog box operation performed consider displays content text file message box file thread pre observable value string load file string string filename uses thread load filename observable returns null file loaded file contents file fully loaded file contents shell parent shell string filename observable value string web page content load file string filename side effect once web page content value content message dialog open information parent shell your file content pre param supplier supplier returns null side wait returns null passed consumer time invoke consumer param consumer idempotent consumer receive null result returned supplier side control operation disposed consumer invoked consumer invoked invoke supplier paused side effect consume once async supplier supplier consumer consumer side effect result side effect runnable runnable supplier null observable tracker set ignore true consumer accept observable tracker set ignore false result dispose result side effect create paused runnable result resume result