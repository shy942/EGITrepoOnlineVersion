/Users/user/eclipse.platform.ui/bundles/org.eclipse.jface/src/org/eclipse/jface/viewers/deferred/LazySortedCollection.java
org eclipse jface viewers deferred java util collection java util comparator java util iterator org eclipse core runtime assert this object maintains collection elements sorted comparator constructor collection lazily sorted allowing efficient runtimes methods there methods object objects queried position sorted collection this modified binary search tree each subtree left subtree count number children set unsorted children insertion lazily when node inserted subtree initially set unsorted children comparing unsorted children remain unsorted set subsequent operation requires exact set elements subtrees time partition comparing unsorted children moving left subtrees lazy sorted collection object contents object left sub tree sub tree unsorted tree size parent tree root node unused node load factor int hash map object indices comparator comparator counter disables randomization enables additional runtime error checking severely degrades performance set true intended test suites enable debug false this object inserted node scheduled lazy removal object lazy removal flag object override string string lazy removal flag direction constants indicating root nodes edge start node direction edge start node direction edge node dir start node node direction dir start start node target start node direction unused node direction root direction left sub tree start node direction sub tree start node unsorted start node null target redirects edge node param node set target node direction left sub tree start node node direction sub tree start node node direction unsorted start node node direction root node direction unused node node node parent tree node start node advance direction start node target direction direction set root node node root node node parent tree node creates sorted collection comparator determine sort order param comparator determines sort order lazy sorted collection comparator comparator tests object internal valid throws runtime exception invalid indicating programming error this method intended test suites called clients test invariants enable debug test invariants root test invariants node node get current tree size force tree size recomputed scratch works properly change tree size subtree size node left left sub tree node sub tree node unsorted unsorted node unsorted node assert true left unsorted nodes shouldn left subtree assert true unsorted nodes shouldn subtree left test invariants left assert true parent tree left node left node invalid parent pointer test invariants assert true parent tree node node invalid parent pointer previous node unsorted tree size tree size unsorted recompute tree size unsorted assert true tree size unsorted tree size invalid node size unsorted node assert true left sub tree unsorted unsorted nodes shouldn left subtrees assert true sub tree unsorted unsorted nodes shouldn subtrees assert true parent tree unsorted previous unsorted node invalid parent pointer assert true contents unsorted lazy removal flag unsorted nodes lazily removed previous unsorted unsorted unsorted unsorted note tested child sizes correct size correct recomputing change recompute tree size node assert true tree size subtree size node invalid tree size unsorted node parent parent tree node parent unsorted parent node false less element element comparator compare contents element contents element adds element subtree returns root subtree param tree subtree insert element add subtree created element add param element add element add subtree method add unsorted tree element add element add tree tree unsorted element add tree size element add element add chop tree size tree remove sub tree tree unsorted element add tree size element add element add real pseudorandom generator simply counter enable debug left sub tree tree sub tree tree left sub tree element add sub tree element add counter counter tree size tree make node pivot unsorted element add tree parent tree element add parent tree tree parent tree tree element add tree size element add tree size tree element add next unsorted unsorted tree unsorted element add next unsorted next unsorted tree size element add tree size element add tree size next unsorted parent tree next unsorted element add parent tree element add tree unsorted tree element add tree size tree tree returns number elements collection number elements collection size result subtree size root test invariants result given tree unsorted children sorts child moving left subtrees returns unsorted child param tree parent tree param move child unsorted subtree partition tree move result unsorted move less move tree left add unsorted left sub tree tree move left sub tree tree left parent tree left tree right add unsorted sub tree tree move sub tree tree right parent tree right tree result partitions subtree moves unsorted elements node left subtrees node scheduled lazy removal force node removed returns tree param tree replacement node tree subtree replaced removal partition tree fast progress reporter mon interrupted exception tree contents tree lazy removal flag tree remove node tree tree idx unsorted tree idx idx partition tree idx unsorted tree idx idx parent tree idx tree mon canceled interrupted exception point remaining unsorted nodes subtree unsorted tree tree subtree size tree tree tree size tree increases capacity collection hold number elements this prior sequence additions avoid memory reallocation this reduce amount memory collection param size capacity collection set capacity size size contents length set array size size adjusts capacity array param capacity set array size capacity object contents object capacity system arraycopy contents contents node contents contents left sub tree capacity system arraycopy left sub tree left sub tree node left sub tree left sub tree right sub tree capacity system arraycopy sub tree right sub tree node sub tree right sub tree next unsorted capacity system arraycopy unsorted next unsorted node unsorted next unsorted tree size capacity system arraycopy tree size tree size node tree size tree size parent tree capacity system arraycopy parent tree parent tree node parent tree parent tree creates node returns newly created node param newly created node create node object result unused node unused nodes prior removals add node result node array overflow reallocate array contents length node set capacity node node reuse node prior removal result unused node unused node unsorted result contents result tree size result clear pointers left sub tree result sub tree result unsorted result destroyed arrays reallocated reallocating object indices null object indices result result returns current tree object param current tree object index object don map values tree indices build map object indices null result object indices int hash map contents length load factor load factor node object element contents element null element lazy removal flag object indices element element result result map object indices redirects pointers original replacement replacement change number elements parent tree propogated root param node replace param replacement node replace node node replace replacement node parent parent tree node replace parent root node replace set root node replacement node left sub tree parent node replace left sub tree parent replacement node sub tree parent node replace sub tree parent replacement node unsorted parent node replace unsorted parent replacement node replacement node parent tree replacement node parent recompute ancestor tree sizes node node size tree size node recompute tree size node tree size node size node parent tree node recomputes tree size node param node recompute tree size node node tree size node subtree size left sub tree node subtree size sub tree node subtree size unsorted node contents node lazy removal flag param recompute param stop force recompute tree size recompute stop recompute recompute stop recompute tree size recompute recompute parent tree recompute destroy node tree param node destroy destroy node node destroy map object indices null object contents contents node destroy contents lazy removal flag object indices remove contents contents node destroy null left sub tree node destroy sub tree node destroy unused node tree size node destroy tree size node destroy tree size unused node parent tree unused node node destroy unsorted node destroy unused node unused node node destroy frees memory clearing list nodes freed removals pack unused nodes unused node reusable nodes subtree size unused node packable nodes node reusable nodes check change time bounds removals contents length packable nodes contents length rather update entire map null needed recreated lazily this save memory map isn needed takes amount time recreate map update indices object indices null maps map new idx onto old contents length map old idx onto new contents length new idx compute mapping determine element idx idx node idx contents idx null map old idx onto new idx new idx map new idx onto old new idx idx new idx map old idx onto new idx make actual array size number nodes expansion nodes new idx capacity math max nodes allocate arrays object contents object capacity tree size capacity next unsorted capacity left sub tree capacity right sub tree capacity parent tree capacity idx idx nodes idx idx map new idx onto old idx contents idx contents idx tree size idx tree size idx left left sub tree idx left left sub tree idx left sub tree idx map old idx onto new left sub tree idx right sub tree idx right sub tree idx map old idx onto new unsorted unsorted idx unsorted next unsorted idx next unsorted idx map old idx onto new unsorted parent parent tree idx parent parent tree idx parent tree idx map old idx onto new parent contents contents unsorted next unsorted tree size tree size left sub tree left sub tree sub tree right sub tree parent tree parent tree root root map old idx onto new root all unused nodes removed unused node node nodes adds object collection runs amortized time param add object add add object add assert not null add create node idx create node add insert node root tree set root node add unsorted root idx test invariants adds items collection collection param add objects add add all collection add assert not null add iterator iter add iterator iter next add iter test invariants adds items array collection param add objects add add all object add assert not null add add length object object add add object test invariants returns true iff collection empty true iff collection elements empty result root test invariants result removes object collection has element exist collection param remove element remove remove object remove internal remove remove pack test invariants internal implementation remove removes element pack container removal param remove element remove internal remove object remove object index object index remove object index parent parent tree object index lazy remove node object index edge parent edge edge object index parent edge set target lazy remove node object index recompute ancestor tree sizes parent test invariants removes elements array collection param remove elements remove remove all object remove assert not null remove remove length object object remove internal remove object pack retains smallest items collection removing rest when method returns size collection note current size collection temporarily visibility implementation fast progress reporter finished param number items retain param mon progress monitor interrupted exception progress monitor cancelled thread retain first fast progress reporter mon interrupted exception size remove range mon test invariants retains smallest items collection removing rest when method returns size collection note current size collection param number items retain retain first retain first fast progress reporter interrupted exception test invariants removes elements range collection for remove range remove smallest items collection param based smallest item remove param length number items remove remove range length remove range length fast progress reporter interrupted exception test invariants removes elements range collection for remove range remove smallest items collection temporarily visiblity implementation fast progress reporter finished param based smallest item remove param length number items remove param mon progress monitor interrupted exception progress monitor cancelled thread remove range length fast progress reporter mon interrupted exception remove range root length mon pack test invariants remove range node range start range length fast progress reporter mon interrupted exception range length size subtree size node size range start chop entire subtree sorting range start range length size remove sub tree node partition unsorted nodes node partition node mon left left sub tree node left size subtree size left remove from left math min left size range start range length removing left node remove from left remove range left sub tree node range start remove from left mon check removing sides remove from right range start range length left size remove from right remove subtree remove range sub tree node remove from right mon removing sides remove node remove node node removing side remove range sub tree node range start left size range length mon recompute tree size node prunes subtree child nodes sorted unsorted param tree remove sub tree tree tree destroy unsorted nodes unsorted tree current unsorted destroy unsorted node destroy node current destroy left subtree remove sub tree left sub tree tree destroy subtree remove sub tree sub tree tree replace node tree destroy pivot node destroy node tree schedules node removal node removed constant time removed param tree replacement node lazy remove node tree left left sub tree tree sub tree tree leaf node remove left result unsorted tree replace node tree result destroy node tree result otherwise flag future removal object contents tree contents tree lazy removal flag tree size tree object indices null object indices remove tree removes subtree replacing children returns root subtree param tree root remove node tree left left sub tree tree sub tree tree left result left leaf node replace unsorted child result unsorted tree either left child missing replace remaining child left result result left result partition result fast progress reporter interrupted exception result result unsorted tree unsorted unsorted tree unsorted result unsorted additional nodes unsorted parent tree unsorted result additional nodes tree size unsorted tree size result additional nodes replace node tree result destroy node tree result find edges lead smallest largest nodes edge smallest edge tree smallest null smallest advance edge largest edge tree largest null largest advance index replacement node replacement node count number nodes moved left size subtree size left size subtree size swap child larger subtree left size size replacement node smallest start move unsorted nodes larger replacement node left subtree largest node edge unsorted edge replacement node unsorted null target unsorted target less target replacement node unsorted set target unsorted target largest set target add unsorted largest target target unsorted advance force recompute tree size unsorted start replacement node force recompute tree size largest start tree replacement node largest start move unsorted nodes smaller replacement node subtree smallest node edge unsorted edge replacement node unsorted null target unsorted target less target replacement node unsorted set target unsorted target smallest set target add unsorted smallest target target unsorted advance force recompute tree size unsorted start replacement node force recompute tree size smallest start tree now tree size elements updated reflect unsorted nodes moved swap nodes object replacement content contents replacement node contents replacement node contents tree contents tree replacement content object indices null object indices replacement content tree note don bother updating replacement node remove good reason search method parameter object indices contents replacement node replacement node replacement parent parent tree replacement node replace node replacement node remove node replacement node edge parent edge edge replacement node parent edge set target remove node replacement node force recompute tree size replacement parent tree recompute tree size tree test invariants tree removes elements collection clear node set array size root unused node object indices null test invariants returns comparator determining sort order collection comparator collection comparator comparator comparator fills array size smallest elements collection can compute result sorted unsorted order currently visible implementation fast progress reporter finished param result array filled param sorted true result array sorted false result array unsorted this affect elements result order param mon monitor report progress check cancellation number items inserted result array this equal minimum result length container size interrupted exception progress monitor cancelled first object result sorted fast progress reporter mon interrupted exception value range result sorted mon test invariants value fills array size smallest elements collection can compute result sorted unsorted order param result array filled param sorted true result array sorted false result array unsorted this affect elements result order computing unsorted result asymptotically faster number items inserted result array this equal minimum result length container size first object result sorted value value first result sorted fast progress reporter interrupted exception test invariants value given position defined array size fills array kth smallest element smallest element for range array false fill array starting smallest item collection result computed sorted unsorted order computing result unsorted order efficient temporarily set visibility implementation fast progress reporter finished param result array filled param range start smallest element result param sorted true iff result array sorted param mon progress monitor cancel operation interrupted exception progress monitor cancelled thread range object result range start sorted fast progress reporter mon interrupted exception range result range start root sorted mon computes items collection computing result unsorted order efficient sorting result change elements result that result unsorted elements range fully sorted collection param result array result param range start element inserted result array param sorted true iff result computed sorted order number items inserted result array minimum result length size range object result range start sorted value value range result range start sorted fast progress reporter interrupted exception test invariants value returns item indexes based sorted order param test item object item object result object range result false fast progress reporter interrupted exception object value result test invariants value returns contents collection sorted unsorted array computing unsorted array efficient param sorted true result sorted order false result unsorted order contents collection array object items sorted object result object size range result sorted result range object result result idx range start node sorted fast progress reporter mon interrupted exception node space result length result idx children current node simply call children range start tree size node space children result result idx node sorted mon node partition node mon node inserted number less than node subtree size left sub tree node range start number less than node inserted space inserted range result result idx range start left sub tree node sorted mon range start number less than node inserted space result result idx inserted contents node inserted inserted space inserted range result result idx inserted math max range start number less than node sub tree node sorted mon inserted fills space array children node param result param result idx result array filling children param node number children array children object result result idx node sorted fast progress reporter mon interrupted exception node temp idx result idx sorted node partition node mon node add child nodes smaller temp idx result length temp idx children result temp idx left sub tree node sorted mon add pivot temp idx result length object contents node lazy removal flag result temp idx add child nodes larger temp idx result length temp idx children result temp idx sub tree node sorted mon add unsorted children empty sorted flag true unsorted node unsorted node unsorted node temp idx result length unsorted node unsorted unsorted node result temp idx contents unsorted node temp idx result idx returns true iff collection item param item item test true iff collection item object item assert not null item value object index item test invariants value