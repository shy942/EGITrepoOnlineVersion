/Users/user/eclipse.platform.ui/bundles/org.eclipse.e4.ui.workbench/src/org/eclipse/e4/ui/internal/workbench/TopologicalSort.java
org eclipse internal workbench java util array list java util collection java util collections java util comparator java util hash map java util hash set java util linked list java util list java util map this topological sort implementation distinguishes objects sorted dependency identifier properly tracks multiple objects identifier this required sorting eclipse extension registry extensions plug dependencies plug contribute multiple sets extensions implementation creates dependency graph vertices represent object identifiers edges represent required relation subclasses implement link requirements object link dependencies object although symmetric operations requirement dependent easier compute contexts combines description algorithm construct dependency graph link requirements object link dependencies object edges represent requirements edges represent dependencies this graph disconnected nodes dependencies sort list identifiers degree degree ids degree roots degree cycle sort nodes degree degree privilege nodes cycle dependencies rarr rarr rarr rarr degree degree output while ids left lowest degree add objects list remove dependents required lists this removal degree require list resorted dependents roots note encounter cycle nodes degree process bundles cycle dependencies single ndoe cycle effectively param type objects sorted param type object identifiers multiple objects correspond topological sort map collection mapped objects hash map captures bundles listed requirements bundle map collection requires hash map captures bundles list bundle requirement map collection depends hash map return identifier object implementation properly tracks multiple objects identifier param object object identifier object return list required code implementors choose code null empty collection easily computed link dependencies object param required code code null collection requirements return list depended code implementors choose code null empty collection easily computed link requirements object param depended code code null collection dependencies sort extensions dependencies contributors note sorting place param objects objects sorted objects topologically sorted order sort objects objects length objects add all objects process objects place process build dependency graph sort nodes degree code requires degree there situations disconnected graphs cycle nodes involved cycle higher degree cyclic node index list sorted outdegree array list requires key set comparator outdegree sorter comparator override compare requires key requires key comparison requires size requires size comparison select node removal greatest depends size depends size comparison collections sort sorted outdegree outdegree sorter sorted outdegree empty item dependencies requires sorted outdegree empty collections sort sorted outdegree outdegree sorter linked list cycle done linked list cycle done add sorted outdegree remove cycle done empty bundle cycle done remove first depends key bundle requires key bundle ext mapped objects bundle index ext process nodes cycle req requires bundle cycle done add req sorted outdegree remove req depends req remove bundle requires remove bundle dep depends bundle requires dep remove bundle depends remove bundle param objects add all objects build list object ids considered objects collection exts mapped objects exts null mapped objects exts hash set exts add build dependency graph reset requires clear depends clear mapped objects key set requires hash set depends hash set populate dependency graph subject mapped objects key set requires key subject depends key subject collection requirements requirements subject requirements null required requirements required equals subject cycles supported ignore objects sorted mapped objects key required required requirement subject subject dependent required depends required add subject requires subject add required collection dependencies dependencies subject dependencies null dependent dependencies dependent equals subject cycles supported ignore objects sorted mapped objects key dependent dependent dependency subject subject requirement dependent requires dependent add subject depends subject add dependent